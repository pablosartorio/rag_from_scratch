 Bueno, no sé si todos saben, creo que sí, porque Martínez ha ido comentando. Esta es la comunidad de práctica de los líderes y las líderes o les líderes, no sé cómo se dicen inclusivo líderes técnicos. ¿Saben? Si alguno sabe, Sebastián, tenemos que averiguar cómo se dice inclusivo líder. Líder al terminar en E incluye a todos. Sí, pero después viste que tenemos el objetivo técnicos, entonces no sabemos, yo no sé nunca si es técnicos, técnicas, líderes técnicos, líderes técnicas, líderes técnicas, no sé, me estalló la cabeza Nora, no lo puedo decir. Yo lo tomo como que incluye a todos. Es inclusivo, ok, bueno, tenemos pocas aparte muchachas en este rol, muy poquitas. Nora y Jorge, ¿hay alguna más Martín? Qué buena pregunta, no, creo que no. Bueno, arrancamos o si vamos rápido no les quitamos mucho más tiempo. La idea es compartirles hoy, hacerles una presentación del proceso de desarrollo nuevo. Va a haber una capacitación a partir de la semana que viene, van a haber una capacitación por especialidad. Esa capacitación es obligatoria. La idea de hoy es hacer un approach, una pequeña presentación como para que estén en tema de alguna manera porque creemos que el éxito de la aplicación, en particular en este caso de un proceso, pero en general de cualquier cosa que uno quiera impulsar, depende en gran medida del acompañamiento de los referentes, de las referentes. Bueno, ustedes son quienes están aquí y quienes no están aquí, pero que también pertenecen a esta comunidad de práctica, son referentes fundamentales para el departamento, entonces necesitamos de alguna manera que ustedes estén acompañando y en el caso de que no estén acompañando porque no estén en acuerdo, bueno, que también nos lo hagan llegar buscando la mejora, no buscando la crítica, porque sí, sino buscando la crítica constructiva. Algunos de ustedes fueron parte de esta construcción, así que algunos lo conocen, de hecho una persona que nos rebotó el documento como cinco veces seguida, ¿puedes ser? ¿Vale Pinio? El muchacho de la casa ordenada, pero estuvo muy bien porque fue muy justo en su devolución, no sé si está, ah no, Katy no está en esta comunidad de práctica, pero Katy también nos hizo varias correcciones y estuvieron todas muy acertadas. Vamos a presentar, Tincho, ¿presento yo o querés presentar vos? Si querés, presenta vos, que ya creo que la conocéis mejor y yo si querés voy haciendo algunos recorremientos, pero está bueno que la de vos me parece. Bueno, dale. Presentamos acá cuatro documentos con numeración, porque no sólo Ale Pinio es Prolijito, nosotros también somos Prolijitos, nos gustan los números consecutivos y tenemos el uno, el dos y el tres y el cuatro, que son documentos nuevos, nuevos, algunos emitidos el año pasado, otros emitidos hace menos de un mes, que son de conocimiento mandatorio, o sea, no es que esto, ay si quiero lo leo, si no quiero lo leo, ay no sabía que existía, pero no, nadie me contó. Digamos que esta reunión es para que nos demos para enterados y enteradas de que estos documentos existen, que los tenemos que leer, los tenemos que entender, no son documentos complejos, varios de ustedes conocen este, porque es el que describe los puestos de trabajo, muchos de ustedes participaron también en la construcción de este documento, otros por ahí no conocen tanto, pero bueno, este es un documento muy sencillo, porque es el que describe cómo se emite, cómo se codifica los documentos en el departamento usando el código 4, en Docklis 473 y estos son los documentos que estamos buscando presentar o que queremos presentar en este encuentro y en las capacitaciones que se van a estar dando. Uno es el ciclo de vida de un producto de software, PSW es la forma de abreviar productos de software, perdón que seguimos sumando siglas a nuestra vida, pero no seríamos INVAP, si no, tenemos que inventar siglas, es una forma simplificada de expresar bastante que tenemos en general en INVAP y en el departamento también. Y este documento que sigue y continúa la codificación es el proceso de desarrollo de un producto de software, ambos documentos son nuevos, fueron emitidos hace dos semanas aproximadamente y este documento va a estar reemplazando a dos documentos vigentes que existen en lo que era antes el viejo servicio de software que bueno, están hace bastante tiempo en vigencia, que no son del todo conocidos para toda la gente, lo cual debiéramos modificar, tendrían que haber sido conocidos para todos, van a estar siendo reemplazados y la idea es que a partir del próximo mes todo plan de trabajo, todo plan de desarrollo como es decir, ACSDP, Software Development Plan, que se emita en su versión A, lo hagan referenciando, perdón, referenciando no, teniendo como aplicable este proceso. En los casos de que hay planes ya emitidos, bueno vamos a mantenernos con el proceso viejo hasta que necesitemos una actualización del plan, en el momento que se requiere una actualización del plan, la propuesta es ir por el proceso nuevo, podría ocurrir que haya casos donde tenemos clientes o socios en el medio y haya que hacer un análisis, bueno eso lo vamos a estar evaluando de alguna manera en forma conjunta con el jefe de especialidad. Es muy importante que todos se apunten estos códigos y que lean estos documentos, es muy importante. Paso a lo siguiente, el eje calidad es algo que estamos impulsando este año como uno de los ejes de objetivos o uno de los objetivos de trabajo importantes para el departamento, aunque mejorar la calidad es un aspiracional que no se resuelve en un año. Hola, mejorar la calidad, es como una anunciación muy amplia que un día no me pierde, decime qué hago. Bueno, ¿qué estamos haciendo en relación a este eje? Una de las cosas en las que estábamos, uno de los objetivos que teníamos para abordar este eje era la emisión de estos documentos. También es objetivo asociado a este eje la capacitación asociada a estos procesos. Ustedes puntualmente tienen en relación a esto un OKR que es el OKR2 que es el de la construcción del diseño técnico que está vinculado a este eje también. Algo muy importante que algunos deben conocer, otros tal vez no, es en los procesos que teníamos, todavía están vigentes, por lo menos que los dimos de baja, pero estamos en proceso de surremplazo, estos dos procesos que teníamos acá hablaban de complejidad en lugar de niveles de calidad. La complejidad de un software es una dimensión que en la industria del software podría asociarse relativamente bien a la calidad del producto. En general, cuanto más complejo ese producto uno podría pensar requiere más calidad. La realidad es que en Inbap, por el tipo de desarrollos que hacemos, la complejidad es una dimensión que define la calidad, pero no es la única. De hecho, nosotros tenemos software, desarrollos de software que tienen mucha complejidad, pero que la calidad no necesariamente es calidad, que es lo más alto que tenemos nosotros. Tenemos desarrollos de software que no tienen tanta complejidad, pero que sin embargo son software críticos, porque por ejemplo podrían poner en riesgo una emisión millonaria. En general no tenemos software que pongan en riesgo la vida de las personas, pero podría ocurrir si damos algún software en el área nuclear. No tenemos mucho software en el área nuclear. Podría ocurrir que si un radar irradie de más en alguna dirección y perjudique o irradie, en general esos enclavamientos están por hardware, pero podría ocurrir que haya enclavamientos también por software. Lo que quiero decir es, hay dimensiones como la criticidad que definen el nivel de calidad y en el concepto que teníamos antes, que solo se veía, evaluaba la complejidad, la criticidad no parecía un juego. Entonces, el proceso que acabamos de emitir vuelve a hablar de niveles de calidad, en donde la complejidad es una dimensión, la criticidad es otra dimensión, la experiencia es otra dimensión. Tincho, no me acuerdo de las otras dos dimensiones. No, no las tengo acá. Hay cinco dimensiones que definen la calidad. Pero no solamente la complejidad, ¿se entiende? Aira veía a Nora haciendo ojos. Nora, ¿estamos ok? Ok, bueno, algo muy importante entonces es, en el proceso nuevo volvemos a hablar de niveles de calidad, que se definen como A, B, C o P. Esto está basado en un documento a nivel empresa, en donde se definen los productos que se construyen con estos mismos niveles de calidad. Nosotros somos un fractal de lo que se define en la empresa y tenemos un documento específico donde se habla por familias de producto, se hace el cálculo de cuál es el nivel de calidad que corresponde a cada familia de producto. Por ejemplo, un software de vuelo suele ser calidad A. Gracias Tincho. Un backend de radar suele ser calidad B y esto lo evaluamos, lo reevaluamos hace poco, en el pasado, hace muchos años, un backend de radar se decía que era C y si no tenía calidad, no importaba. Por ende, la librería del procesador también debiera ser calidad B. Sí, Nora y Leo que los veo, no sé lo que ustedes harían, sería calidad B. Una plataforma de ensayo, que por ahí lo estoy viendo en la OT, sería calidad C. O sea, bueno, a los que voy viendo les voy diciendo qué calidad tendría. Hay un documento que habla de esto, después les vamos a compartir. ¿Hay un concepto? Sí, Nacho. Perdón, la duda que tengo es, cuando arranca un proyecto nuevo, ¿quién le pone la calidad al producto software? ¿Ya la determinamos nosotros? ¿El proyecto define? Lo que estamos haciendo es, hay un documento emitido que tiene el mismo código que estos, 473.dw.nq.ucs.007, que tiene el cálculo del nivel de calidad para las familias de productos. Entonces, ahí ya sugiere que un backend de radar debiera ser calidad B. No obstante, podría ocurrir, por ejemplo, como, no me acuerdo si está ahí ya incluido o no, que aparezca, por ejemplo, el software de vuelo para un proyecto Newspice. Y en ese caso, que es Newspice, pone otros requerimientos distintos. O sea, hay riesgos que se sumen y por ahí no está esa familia de producto, tiene un condimento nuevo y entonces habría que hacer el recálculo. Justo el ejemplo que viste está identificado. Podría ocurrir otro. No sé, el software de un drone. No lo hicimos. Entonces, el cálculo lo debiera nacer en conjunto con el jefe de especialidad y el líder de arquitectura. La idea es, y analista de calidad, o sea, Morice, en tu caso, Danita Eira sería Nacho y Bettina Melo. Para hacer esa evaluación, y no es que nos vamos a cazar ahí, esto tiene que ser, esto tiene que ser, esto tiene que ser, pero si vemos que el cálculo nos da una cosa y el proyecto nos quiere otra cosa, bueno, va a haber una, se va a generar una discusión que va a ver quedar. Sí, Nico. Nico Jai. Ahí va. No, sí, y si contemplan que ciertos componentes tengan un nivel de calidad y otros no. Lo ideal sería que pudiéramos hacer eso, porque esa es una forma de bajar, de hacer desarrollos más eficientes. No estamos todavía en esa situación, pero sí podríamos hacerlo desmenuzándolo desde el comienzo, digamos. Un software de vuelo es una conversación que tenemos varias veces con Diego Mercado, con Morice también. No debiera ser todo A. Sí, Pinch. No, solo para agregar que en este documento de familias de producto no lo hicimos por componentes, pero eso no quiere decir que no se puede hacer, es decir, si tenés que hacer algún desarrollo donde podés identificar componentes y para vos como líder técnico tienen niveles de calidad distinto, lo hablamos junto al jefe de especialidad, conmigo, con Bettina, y acordamos esos niveles de calidad. No habría problema. Sí, Carlos. Buen día, ¿cómo andas? Alguna vez hablábamos, ahí estaba la conversación, estábamos con el SaoCom. Es como la calidad en una cadena funcional, el componente más malo, digamos, por decir así, al hondo en general es el que te tira la calidad, digamos. O sea, está bueno basarse en cosas de librerías, bibliotecas que están un poco improbadas, pero evidentemente es algo como colectivo la calidad, digamos. Es difícil sectorizar, digamos. Sí, sí, es difícil, pero es algo que en algún momento tenemos que avanzar en esa línea, porque si no estamos, a veces encarecemos mucho todo el desarrollo, hay que en esa línea, ojo, eso más en el lado de software de vuelo, en el lado de rodales nos pasa al revés, estábamos haciendo cosas C y cuando hacemos el cálculo nos daba B. Y se llama C porque el área de gobierno decía, no hace falta. Bueno, según los numeritos nos dan B y la realidad es que cuando nos remitimos a las prácticas de lo que se hacen los equipos en general es coincidente con un B, lo que estamos haciendo. Sobre todo estoy hablando de los grupos de desarrollo de software. Los grupos de modelística no tenían este concepto incorporado, pero cuando uno va a lo que se hace, efectivamente se hace con el tipo de pruebas que hacen sobre lo que están entregando, es más propio de algo de un producto de calidad B diría. Voy a avanzar porque si no nos va a alcanzar el tiempo, ¿les parece? Algo que también queremos incorporar es el concepto de atributos de calidad. Hablamos de niveles de calidad y también de atributos de calidad. Y en relación a los atributos de calidad vemos la necesidad de incorporar estas características, analizarlas lo más temprano posible porque nos estamos viendo que avanzamos, nos adentramos mucho en los desarrollos de software y si no tuvimos en cuenta alguno de estos atributos puede ser que tengamos retrabajos grandes, mucho retrabajo. Estos atributos de calidad acá están enumerados algunos, hay muchos, ahí estamos usando un estándar de la ISO para esta definición, pero no obstante es algo que va evolucionando en tanto avanza el desarrollo del software. Es importante empezar de entrada a analizar este tipo de requerimientos. De hecho son los requerimientos que más le dan sentido a nuestro departamento porque no haber identificado de manera temprana requerimientos de performance o requerimientos de seguridad o requerimientos de confiabilidad o de mantenibilidad. Mantenibilidad justo es algo a lo que a veces no le prestamos mucha atención. Puede llevarnos, depende del tipo de producto que se esté construyendo, puede llevarnos a que tengamos que rehacer mucho de lo que estábamos construyendo. Entonces la idea es hacer aparecer esto de manera muy temprana. O sea, hola, tengo que hacer un software. No solo enfocarnos en la parte funcional que es a donde tendemos a ir, sino hacer un esfuerzo y acá es re importante ustedes como líderes técnicos que empujen para que, no es que esto va a aparecer como definición nadie del proyecto. O sea, difícilmente la gente del proyecto nos diga este es el requerimiento de usabilidad, no sé, o este es el requerimiento de mantenibilidad. Somos un poco nosotros quienes vamos a tener que pescar, que identificar, que definir cuáles son estos requerimientos. Voy a pasar para seguir, pero esto creo que es un tema a construir justamente en esta comunidad de prácticas. A construir, quiero decir a debatir y a generar criterios, porque es algo sobre lo que hay que construir criterios. Paso a la que sigue. Este es un dibujito que está copiado manualmente, porque si no teníamos que pagar copyright, de algo que está del manual de ingeniería de sistemas de la NASA. Está tomado de ahí, pero también en algunos de los documentos del milestandar hay algo muy similar, que viene asociado a cuál es el ciclo de vida de un proyecto. Tomamos el de la NASA, les pido disculpas a las personas que están en el área de gobierno, pero bueno, son documentos accesibles que de alguna u otra manera son bastante conocidos para nosotros en INVAA, porque la influencia de la NASA en el área espacial y la posterior creación del área de gobierno, creo que es algo que es bastante familiar para todos. De hecho, los nombres de los citos son los mismos, estos no son nombres de hitos propietarios de la NASA, sino que son nombres de hitos medio estándar para proyectos que tienen mucha envergadura y complejidad. En la NASA se hablan de seis fases asociadas a un proyecto. Una de estudio preliminar, otra de conceptual, básica, detalle, esto es bastante conocido para nosotros. Ensamble, integración, pruebas de sistema, operación, mantenimiento y cierre del proyecto. Y hay algunos hitos que están acá marcados en rojito que son algunos de ellos conocidos para nosotros, depende del área donde estén trabajando. Hay dos que son conocidos, creo que para casi todos nosotros, que son el del hito de PDR y el hito de SDR. En el área espacial participamos muy activamente en estos hitos, de hecho hay algunos de los grupos que exponen durante estas revisiones. En el área de gobierno depende del grupo, a veces tenemos una participación activa, a veces no tanto, porque lo resuelve directamente ingeniería del sistema. Me parece que en los últimos proyectos esto en el área de gobierno lo está haciendo directamente el sistema si nosotros no participamos. Bueno, promedio que varía, tal vez porque la revisión que hay a nivel área de gobierno no implica tanto revisores externos, sino que es más el propio cliente. Pero bueno, ¿hay capaz que los que estén trabajando en gobierno en el último rato les tocó participar en algún SDR? No era Nacho, Niko Gia, estuvieron en algún SDR en el último rato. Bueno, pero si en el área espacial, ustedes estuvieron en el área espacial, sí. Bueno, es ahora, aunque no estemos participando en el área de gobierno en estos hitos, estos hitos existen también, sobre todo PDR y SDR. Esto solo para poner contexto, en los proyectos en Inbap se resuelven de esta manera. En Inbap y en general los proyectos de alta complejidad se resuelven de esta manera. Tienen como si fuera una especie de vista que parece algo encascada. Primero hago un estudio preliminar, después hago la conceptual, después hago la ingeniería básica, después voy al detalle. Y de alguna manera es encascada. Y si bien las actividades que nosotros hacemos no son tan encascadas, de hecho muchos de ustedes deben haber escuchado y si no lo escucharon lo deben decir ustedes, trabajamos más en un esquema que es iterativo e incremental. Vamos iterando y agregando valor y vamos iterando y es parte de nuestro trabajo tiene esta forma. La realidad es que para poder ser compatibles con el proyecto, necesitamos alguna forma, una forma, presentar lo que hacemos encascada. No quiere decir que las actividades que hagamos sean encascadas, pero sí necesitamos ordenarnos para poder dialogar con los proyectos y entendernos. Entonces hay uno de los documentos que es el que termina en tres, que habla del ciclo de vida de un producto de software en Inbap, donde hace esta presentación. Entonces invito a leer ese documento, no digo que esté buenísimo, pero bueno, primero no sirve el feedback y segundo pone marco, pone contexto a lo que estamos haciendo, en donde identificamos, asociados al proceso de desarrollo de software, al ciclo de vida de un producto de software en Inbap, también se hay fases como de alguna manera se identifica en la NASA. La NASA tiene siete porque hay una séptima que es de cierre, pero casi que no es una fase, eso es como una actividad, pero bueno, una NASA hace una actividad, es en la cierre. ¿Qué es la de análisis preliminar? Este es el nombre que le pusimos. La fase 1 es de ingeniería conceptual, la fase 2 de ingeniería básica, la fase 3 ingeniería de detalle, la fase 4 estabilización, la fase 5 soporte y mantenimiento. Estas seis fases son las que identificamos en el departamento como fases primarias, digamos, alrededor del ciclo de vida de un producto de software. ¿Podrían ser más? ¿Podrían ser alguna menos? Bueno, llegamos a este equilibrio, esto también es revisable a futuro, necesitamos arrancar y ordenar algunas de estas cosas, en sí que con las personas que estuvimos construyendo esto, concluimos en que esto más o menos nos convencía a todos. La fase 0 que es la análisis preliminar, es en la cual a veces participamos haciendo estudios de factibilidad, hacemos cotizaciones básicas muy preliminares, se hacen algunos cálculos. Fundamentalmente yo creo que en esta fase del proyecto participa en los grupos de análisis de temas complejos y guiado a navegación y control. Por ahí cuando se hacen algunas evaluaciones muy preliminares, el análisis de temas complejos es una de las especialidades que arranca a trabajar con el proyecto y arrancan en esta fase. Los grupos de software a veces nos invitan a cotizar, muchas veces no, y entramos después. Está bueno entrar antes porque podemos ayudar a especificar este hardware no nos conviene, mejoramos para acá, esto nos implica un montón, hay que volver a hacer un montón de cosas, en cambio si vamos para acá tenemos más reuso, hay que empujar, tratar de arrancar más temprano, la realidad es que las especialidades del software no ocurre del todo. La fase 1, la fase 2, la fase 3, que son las que están acá marcadas en verde, que por compatibilidad con lo que se hace en los proyectos mantuvimos casi los mismos nombres de conceptual básica y detalle, es por compatibilidad, y la realidad es que acá a nosotros nos ocurre en medio de alguna manera en un continuo, pero tenemos algunas instancias en particular, por ejemplo en los proyectos espaciales, en los proyectos de gobierno sí o sí de alguna manera para arrancar tenemos que presentar un plan de trabajo. En el caso del área satelital muchas veces el plan de trabajo forma parte de la presentación, a veces del SRR en el cual ahora a veces nos invitan a participar, a veces no, pero bueno igual es algo que tenemos que tener de manera bastante temprana, pero más allá de lo que nos piden en el proyecto, el plan de trabajo que es lo que vamos, el plan de trabajo incluye una idea de cómo vamos a hacer las cosas, pero también una idea de qué es lo que queremos hacer, es una planificación, estamos apuntando a resolverla dentro de esta primera fase. La idea es que todo lo que hagamos se inicie con un plan, tengamos un plan, ya sé que después los planes se cambian, porque la verdad es así, uno planifica y después la vida nos cambia, así nos pasa en nuestra propia vida. El tema es que cuando empezamos a trabajar sin un plan, no tenemos, estamos un poco en el aire, estamos un poco en el aire porque nadie dice que no pensemos las cosas, seguro están pensadas en la cabeza, en nuestras cabezas están esas ideas, eso hace que los planes sean dependientes de las personas, eso hace que cuando empezamos a cambiar las cosas y no llevamos un pequeño registro se nos vuelva muy difícil explicar por qué tenemos tantos desvíos o cosas que están modificándose que no habíamos tenido en cuenta. El no tener una primera emisión de ese plan también nos lleva a otras dificultades como dificulta la posibilidad de mejora, porque al no haber escrito nada, todo quedó en el aire y hay que recurrir a los recuerdos, a las memorias nuestras, eso es algo difícil. Y una cosa más por la que es muy importante en esta fase de emitir un plan, que es, eso implica algunos compromisos y cuando uno se compromete después puede modificarlo, todo es modificable, pero hay que poder explicar. Yo he pensado emitir tres revisas, resulta que tengo que emitir 45. Ay, pero qué pasó, aparecieron el triple de stakeholders, no, no. Yo pensaba que esto lo vamos a hacer con un equipo interno, resulta que tenemos la mitad de equipo interno, la otra mitad lo tengo que hacer con un proveedor. Pensábamos que íbamos a hacerlo con referentes que ya estaban empapados en el tema, resulta que esto no es así y que lo tenemos que hacer con todo grupo de personas junior. O pensaba usar, reutilizar tal cosa, no la puedo reutilizar, o al contrario, me di cuenta que puedo reutilizar. El escribir un plan, nadie dice que no se puede modificar, pero siento una base para poder analizar qué es lo que fue pasando y para que también cuando tengo que hacer modificaciones de alguna explicación de por qué lo cambio. Se entiende, porque si no en el medio camino las cosas cambian y después nadie entiende por qué. Y siempre hay una explicación, siempre hay un driver que explica temas que muchas veces no dejamos registrados. En la fase 2, que es la definiría básica, el foco está en entender los requerimientos más a detalle y en diseñar cómo vamos a hacer ese software. O sea, sería una fuerte base en el documento de requerimientos, que es lo que antes se conocía como SRS y en el documento de ingeniería, que es el que se conocía como SDB. Y la fase 3, que es la ingeniería de detalle, es la de la construcción del software, que es donde básicamente uno escribe líneas de código y testea y genera releases. La realidad es que todos nosotros sabemos que ninguna de esas cosas se hacen, ¿acaso lo planifico, acaso lo diseño y hago análisis de requerimientos, acaso lo hago codificación? ¿Se entiende? ¿Sí? Bueno, más o menos. Martín me dice que sí, pero Martín nosotros no lo creíamos. Lo entiendo. Voy a pasar acá y ahora vuelvo a esa, después me vuelvo a la anterior. El proceso de desarrollo del software está enfocado en estas tres fases. Hay más fases, hay fases que son súper importantes como las de análisis preliminar, las que queremos empezar a participar más, la fase de estabilización en la que participamos, los grupos de todas las especialidades de este departamento participan mucho en la estabilización, la fase de soporte y mantenimiento, aunque no querramos o si querramos, no lo sé, también participamos activamente. Cada vez que hay un problema en un software que ya está entregado, el teléfono viene a todos los grupos de este departamento, a todos, o sea, de hecho, en el caso de la área espacial, el punto de entrada es ingeniería de operaciones para estas actividades. Estas tres partes que están marcadas en grises acá y que acá no estoy marcando, no quiero decir que no sean cosas que tengamos que no atender, simplemente uno las tenemos en procesadas, ¿se entienden? Saben, tenemos el proceso escrito en esto y estas actividades no están en procesadas todavía, estas fases no están en procesadas. Esto es así, ya en la historia del servicio software solo hubo procesamiento, hubo proceso sobre esto, no estaban visibilizadas estas fases, ni la anterior, ni las posteriores. Ahora el paso que estamos dando es visibilizar que existen estas fases y lo que va a haber que hacer en un futuro es generar un proceso. ¿Por qué no incluimos el proceso? Porque vemos hoy, aunque esto es en análisis y construcción, que estas fases no tenemos gobernabilidad total sobre estas fases. Nosotros las hacemos en conjunto o casi en dependencia de los proyectos. Por ejemplo, la estabilización de un sistema, nosotros somos una pieza más en la estabilización. O sea, lo que estamos pensando es que el proceso más que nuestro debiera ser del proyecto, del área de negocio y nosotros acoplarnos a las actividades que ellos propongan. Lo mismo con las actividades de soporte y mantenimiento. Ahora, esto hoy está un poquito en el aire, hay que empujarlo, lo primero que estamos haciendo es visibilizar. Reitero, hasta ahora para nosotros solo existían estas tres fases. Estamos visibilizando que un producto de software incluye otras fases que hacemos, pero que las hacemos como de onda. No sé si lo sienten así, pero ninguno tiene planificado tiempo para la estabilización. Ahora, por ejemplo, el Resma S podría ser que esté en esa fase y está Nacho y Leo Vecinski ahí también. Nacho, Leo Vecinski y Víctor. ¿Y cómo es el modo? ¿Hay un problema? Al ataque. Ahí vamos. Sí, Walter. ¿Dónde está el testing? ¿La fase 3 o la fase 4? La 3. La 3. O sea, el testing está en todas, lo que pasa es que propiamente dicho la ejecución de los tests, si querés, está más asociada a la 3. La idea es que el testing esté en absolutamente todas las fases, inclusive en la conceptual para armar los planes. Hay que entender el plan también del punto de vista del testing. Puede ser que eso lo haga el líder técnico, pero tiene que incluir las dos fases. O sea, la estabilización ya uso realmente del sistema. En el sistema, exacto. Ya está testeado el software y se está integrando con todo el sistema y ahí se estabiliza. Tiene que entrar testeado, si no es un caos. Eso es después que nosotros hacemos la release, la que llamamos última release, y lo pongo entre comillas porque no hay una última release, pero siempre nosotros pensamos que bueno, esta es la release que es la que va. Bueno, después que nosotros hacemos la release, eso va a una fase de, se empieza a poner en producción, se usa, se prueba, o sea, se prueba pero a nivel sistema, en el proyecto. Pero todavía, o sea, es una release que recién emitimos que pasó en nuestras pruebas, pero recién entra en el sistema. Entonces esa es la fase de estabilización donde el producto que nosotros hacemos empieza a usarse en un ambiente productivo. Bueno, ahí van a ocurrir problemas, pueden ocurrir problemas, y eso puede incluir tener que arreglar algo, tener que ir hacia atrás y revertir algún requerimiento, tal vez rever algún filter que hayamos hecho o que nos faltó o que no haya sido probado todo lo que fuera, y tener que hacer una release nueva. Eso dura un tiempo y después termina la fase de esta que llamamos la fase de, bueno, la fase 4 que es la de estabilización. Podría ocurrir el caso en el que está Carlos Caretti, que Carlos Caretti está en una maduración, una maduración de un producto que ya está re entregado, porque está en el radar meteorológico. Y ahí no es que está en estabilización. Ahí entra de vuelta a la fase 1, probablemente la fase 1 la pasa rápido, probablemente la fase 2, depende de lo que haya que hacer la pase rápido también, pero vuelve a entrar a este ciclo. No sé si están, que tan al tanto están del radar meteorológico, pero bueno, se está rediseñando el sistema, algunas partes del sistema no completo. Voy a pasar a la siguiente pues si no nos va a alcanzar el tiempo. Esto igual pretende ser solo un approach. La idea va a haber una capacitación y la idea es que ustedes lean los documentos. El proceso de desarrollo de software plantea cinco grupos de actividades. Planificación, análisis, diseño, implementación y entrega. Esto en bibliografía de la industria del software se presenta con cinco actividades, 6, 7, 4, depende de lo que uno lea, pero básicamente es esto. Se muestra generalmente como algo que es un círculo, porque ocurre de manera permanente. Hicimos esta clasificación para después agrupar los tipos de tareas que se van a hacer. Quiero mostrar el siguiente imagen. Esto sería como el tornillo acostado, pero es un tornillo que está en resorte. Es una imagen que construimos acá con el equipo para tratar de expresar. Esto está en colores los cinco grupos de actividades que estaban acá y muestra en las fases, esto trata de identificar esfuerzo, cómo se van en la fase 1, cómo predominan las actividades de planificación, porque en estas fases es donde se está justamente haciendo los planes de trabajo, tanto el SDP o el STP, plan de trabajo que es el nombre que ahora vamos a proponer. Pero obviamente hay análisis, hay algo de diseño, a veces hay algunas implementaciones, depende del equipo. Esto es solo ilustrativo, no tiene por qué ser exactamente así. En la fase 2 intenta mostrar que el énfasis está puesto en análisis y diseño, estas dos actividades, pero obviamente también se planifica, también se implementa algo, también se entrega alguna cosa. Acá en esta fase es donde generalmente se genera el SRS y el SDP, que ahora estamos proponiendo como nombre un diseño funcional y diseño técnico. Ustedes están trabajando, entiendo que en el diseño técnico en esta comunidad de práctica, en la fase 3 vuelve a mostrar que se hace planificación, se hace análisis, se hace diseño, pero cada vez la implementación gana más terreno. Esto intenta mostrar el diseño iterativo e incremental, no es exactamente así, esto es una idea, trata de ser, de representar un conjunto de ideas que no es tan fácilmente dibujable, pero muestra este espiral de que vamos repitiendo todo el tiempo estamos planificando, haciendo análisis, diseño, planificación y entrega, todo el tiempo lo vamos haciendo y depende del momento en el que estemos, toma más preponderancia uno que otro. Esto intenta mostrar el iterativo e incremental con la cascada que tenemos en la fase de trabajo para con los proyectos. Esperamos esto ayude a entender, no sé si ayuda, le metimos mucha pila, pero no sé si es claro, se entiende o no se entiende esta imagen. Sí, clarísimo. Bueno, paso a la siguiente. Algo que estamos incorporando en este proceso nuevo es algo que le llamamos enfoque ágil. Nosotros veníamos hasta ahora trabajando con un proceso que uno diría está basado en entregables que son documentos y ahí teníamos la chorrera de documentos que había que entregar. La propuesta en este proceso es mantener para aquellos equipos, ya sea porque el equipo lo tiene muy entendido o porque el proyecto lo exige, mantener ese enfoque que le llamamos tradicional, que está medio basado en documentos, pero queremos incorporar otro enfoque que le llamamos ágil. No debiera decir acá entregables, no? No, no, bueno, enfoque ágil. Enfoque ágil. Bueno, y en este enfoque ágil la idea no es tanto basarnos en entregables, sino basarnos en actividades. Esas actividades después impactan sobre un documento, impactan sobre un entregable, pero la idea no es ah, el entregable, el entregable es el documento, el documento, el documento. El documento es una consecuencia de la ejecución de un montón de actividades que estamos haciendo, que están haciendo. Lo que estamos inventando actividades nuevas. Son actividades que habitualmente hacen en los equipos, en algunos casos con evidencia, en otros casos sin evidencia y depende del tipo de producto está bien que no tenga evidencia. La idea es poner sobre la mesa esas actividades y decir bueno, estas actividades debieran impactar, debieran reflejarse en un documento, en una salida, pero el foco lo vamos a poner en las actividades. ¿Se entiende? O sea, en lugar de estoy trabajando para generar documentos, estoy haciendo actividades que generan documentos y hay que ver qué tiene que tener documentos según el nivel de calidad del producto. Y en este enfoque además lo que vamos, lo que estamos tratando de hacer es acercarnos un poquito a la industria del software. Cuando nosotros incorporamos personas nuevas o hablamos con proveedores, hablamos con personas que son ajenas a nuestro nicho de negocio, lo que vemos es que se nos hace muy tediosa la comunicación. Todos nuestros nombres están llenos de, bueno, vieron que somos expertos en siglas nosotros. Realmente vemos que se une de complejo hablar y ya no solo con gente que está fuera de la organización, sino que también con nuestros propios equipos de trabajo, porque los grupos de análisis de más complejos, me acuerdo cuando les decíamos todas las cherdas de siglas, ya no, ¿por qué? Nos enroscamos y eso no es que esté mal, pero queremos hablar un poquito más un idioma que sea compatible con los seres humanos, hablar en humano, digamos. Entonces vamos a incorporar como nombres para los documentos, nombres que nos describan qué es esto. Plan de trabajo, por ejemplo, diseño funcional, diseño técnico, manual de uso, reporte de pruebas, liberación de software, informe de avance. El día es que todo producto de software que se construya, no importa el nivel de calidad que tenga, va a tener que tener un plan de trabajo, un diseño funcional, diseño técnico, manual de uso, una liberación de software, que lo que llamábamos release y bueno y eventualmente un informe de avance. Todo producto tiene que tener esto, obviamente con distinto tipo de completitud dependiendo el nivel de calidad. O sea, las actividades que hay que hacer para generar un diseño funcional en un producto A o en un producto C van a ser diferentes. Por ejemplo, en un producto A vamos a tener que tener los requerimientos tal cual venimos escribiendo. Mapa de stakeholder, que es algo que estamos incorporando. Los casos de uso, que es algo que siempre teníamos y dejamos de hacer pero que debiéramos recuperar porque no necesitamos. Algo que están trabajando en este momento los analistas de productos, que es la arquitectura funcional. Y en el caso de los productos nivel A, listado de requerimientos tal cual estábamos acostumbrados a escribir. La realidad es que en un producto nivel de calidad C a veces no tenemos en general mapa de stakeholder, no escribíamos casos de uso, no teníamos arquitectura funcional porque eso es algo que estamos incorporando nuevo y sin embargo teníamos un montón de requerimientos que podríamos sentarnos a charlar horas con Walter por ejemplo justo que está sufriendo. Un montón de documentos con requerimientos que no dicen nada. No Walter, ahora dicen algo. Quieran para cumplir. Y la realidad es que tal vez al producto C no hace falta, no quiero decir que no tengamos que describir de alguna manera qué es lo que se necesita que ese software resuelva pero no necesariamente tienen que hacer requerimientos, pueden hacer historias de usuario, pueden ser casos de uso muy bien explicados. En la industria del software no se hacen todos los software con listados de requerimientos, se usan muchísimas historias de usuario. Entonces la propuesta de este enfoque es buscar maneras para describir qué es lo que hay que hacer, o sea, el diseño funcional y cómo lo vamos a hacer, o sea, el diseño técnico que realmente nos sirvan para la construcción del software. No que sea lo tengo que hacer porque es lo que me dicen que tengo que hacer. Tengo que escribir listado el requerimiento si no entiendo qué es pero lo escribo. No entendí nada y bueno pero esto y escribí cinco, no sé, cinco, diez, treinta requerimientos no dicen nada pero cumplí. Sino que buscar la forma de describir las necesidades de una manera que se adecúe lo más posible a la dinámica del equipo, al tipo de producto que hay que describir. Y no que nos estén obligando en mandatos que terminan siendo burocráticos. La idea es bajar burocracia, acercarnos a la resolución del problema, pero esto no quiere decir que no va a haber nada. Ah, los requerimientos, no, porque no sirven. No, bueno, si no sirven los requerimientos, puede ser, pero tiene que haber. Casos de uso, sí, yo creo que casos de uso sirven. Bueno, es una práctica que abandonamos en Deportamento y que por ahí está bueno recuperar historias de usuario y puede ser que para algunos productos sirvan, sean más adecuadas las historias de usuario que requerimientos, que la escritura en formato de requerimientos. La idea es acercar el proceso a algo que realmente nos sirva para llegar a un... nos sirva para construir un producto y no tener un proceso que ustedes sigan porque dicen que hay que seguirlo, pero que no sienten que les agregue valor. ¿Se entiende? Ustedes como líderes técnicos son fundamentales para buscar ese equilibrio, porque no es que lo tenemos claro con... ah, es así, a un EGC, si le escribimos historias de usuario, es lo mejor. No sé, para qué no. Un DCS lo veo a Nico Giai. Un DCS que es re difícil definir requerimientos de entrada porque no hay... porque no se sabe cuál es... hay cosas de muy alto nivel. Y no sé, yo creo que no tener hoy los casos de uso claramente escritos, pero ellos conducen a requerimientos que no son. Y por ahí es fundamental eso, poner esfuerzo en escribir bien los casos de uso. ¿Y cuáles son esas... la arquitectura funcional? ¿Cuáles son los... el conjunto de funcionalidades mandatorias que tiene que tener un DCS? Pues parece que hay que entender bien cuál es el caso... cuáles son los casos de uso. Ahora, esto no es que lo tenemos superclaro, lo tenemos... lo estamos construyendo. Es una propuesta a construir iterativamente con ustedes. O sea, ¿verdad que dije? Iterativo incremental vale para el proceso también. Es una propuesta de proceso que tiene un montón de información. Lo que necesitamos, iterar con ustedes y necesitamos obtener feedback de ustedes para que esto funcione. Si nos pasa que tenemos un proceso escrito que nadie conoce, que hace y dice, ¡uy! y luego tengo que hacer este bódrio porque es lo que me piden, estamos fracasando. Esto tiene que ser una herramienta de trabajo real para ustedes. ¿Tincho, Nahue, quieren decir algo alrededor de esto? No, sí, por ahí que hay un conjunto de actividades, o sea, junto al proceso hay un Excel. Ese Excel tiene un montón de actividades también separadas por los niveles de calidad, que es un poco lo que decía Cele. Ese conjunto de actividades está bastante depurado. Lo vieron un montón de personas, varios de los líderes técnicos participaron de la construcción y la revisión de eso. Pero bueno, puede ser que haya todavía cosas para rellenar. Pero en principio está bastante depurado. Yo no, o sea, lo que sigue es, no es del todo importante. Quisiera por ahí más que apegarme a la presentación. Quedan cinco minutos nomás. Esto es solo así un print rápido de lo que van a estar viendo en la capacitación. Ver si tienen consultas, si hay algo que nos quieran compartir. ¿Consultas? ¿Algo? Muy buenas las presentaciones. Gracias, no? Muy buenas. Tengo una consulta por ahí. Cuando armamos Google Package, realmente nos comprometemos algunos documentos. Eso cambiaría ahora con esto. O sea, serían otros documentos los que, o tendrían otros nombres por lo menos. Tendrían otros nombres, el contenido va a ser lo mismo. La realidad es que no hay cambios en enorme profundidad. O sea, lo que antes decíamos SDP-STP era un plan de trabajo. Y podrías mantener SDP-STP, Nacho, si ya estás así comprometida. O podemos modificarlo. La idea es el proceso de nuevo admite las dos posibilidades. Sí, siempre nos tenemos que comprometer algunos entregables. En síntesis para el proyecto, la papeleta es lo que termina siendo el entregable. Pero sí lo que nosotros queremos es que nosotros no estemos trabajando para, solo para ese entregable. Nosotros tenemos que hacer un software que cumpla con determinadas características y que estemos trabajando para eso. El entregable es la frutilla, es la salida de eso que hacemos. Pero no es el objeto. Y después lo otro que veías que al final de la fase dos se generaría, por lo menos, la primera versión del documento técnico. Sí. Pero ese sigue evolucionando, ¿no? Obviamente. Sí, y el diseño funcional también, tal cual. Se genera una primer foto. Una primer foto que es con la que vamos en general a un CDR, ¿no, Tincho? Ya vamos ahí. Vamos a un CDR en general en el área espacial. Pero sí evoluciona, evoluciona hasta el final eso. Y por ahí una cosa que quería agregar es que, o sea, hoy todos los proyectos que tenemos, uy, ya lo dejó David, están bajo el proceso anterior que tienen los otros documentos. Entonces uno sigue en principio con esa línea y de a poco va a ver cómo cambiarse a este proceso con los cambios que se impliquen. Y si hay algo nuevo para hacer, bueno, el idea es que salga con este proceso nuevo como referencia. Se va a cortar. Alguien quiere pasar, Nawe, querés pasar otro link por si quieren que los que quieran nos quememos lo que nos va. ¿Quién levantó la mano? David primero. Sí, los analistas de productos no están en esta Meet o no veo ninguno conocido, van a tener otra reunión este jueves o viernes, no me acuerdo. Hicimos una presentación por comunidad de práctica y después de haber una capacitación por especialidad, pero la presentación queríamos hacerla por comunidad de práctica que son por ahí los que estamos manteniendo reuniones. Nico Gialla. Está activando el micrófono. En el proceso, que me acuerdo el anterior, en las actividades se nombraba bastante lo que era calidad de software y en todo lo que presentaron no lo mencionaron ni una vez. ¿Eso cómo lo introducimos? Propongo que la respuesta sea en el link de Nawe, porque se va a cortar y no vamos a hacer el copy-paste. Dale, gracias.